(program
  (: GRID_SIZE Int)
  (= GRID_SIZE 16)

  (type alias Position ((: x Int) (: y Int)))
  (type alias Particle ((: position Position)))

  (external (: click Click))

  (: particles (List Particle))
  (= particles (initnext (list) (if (occurred click) 
                               then (push! (prev particles) (particleGen (Position 1 1))) 
                               else (map nextParticle (prev particles)))))
  (: nparticles Int)
  (= nparticles (length particles))
  
  (: isFree (-> Position Bool))
  (= isFree (fn (position) 
                (== (length (filter (--> particle (== (.. particle position) position)) (prev particles))) 0)))

  (: isWithinBounds (-> Position Bool))
  (= isWithinBounds (fn (position) 
                        (& (>= (.. position x) 0) (& (< (.. position x) GRID_SIZE) (& (>= (.. position y) 0) (< (.. position y) GRID_SIZE))))))
  
  (: adjacentPositions (-> Position (List Position)))
  (= adjacentPositions (fn (position) 
                           (let ((= x (.. position x)) 
                                 (= y (.. position y)) 
                                 (= positions (filter isWithinBounds (list (Position (+ x 1) y) (Position (- x 1) y) (Position x (+ y 1)) (Position x (- y 1))))))
                                positions)))

  (: nextParticle (-> Particle Particle))
  (= nextParticle (fn (particle) 
                      (let ((= freePositions (filter isFree (adjacentPositions (.. particle position))))) 
                           (case freePositions
                                (=> (list) particle)
                                (=> _ (Particle (uniformChoice freePositions)))))))

  (: particleGen (-> Position Particle))
  (= particleGen (fn (initPosition) (Particle initPosition)))
)

(program
  (: GRID_SIZE Int)
  (= GRID_SIZE 16)

  (external (: click Click))

  (object Particle (= render (list (ColoredCell (Position 0 0) "blue")) ))
	
  (: particles (List Particle))
  (= particles (initnext 
                  (list) 
				          (updateObj (prev particles) (--> obj (Particle (uniformChoice (adjPositions (.. obj origin))))))))	
  
  (on click (= particles (addObj (prev particles) (Particle (Position (.. click x) (.. click y))))))
)

(program
  (: GRID_SIZE Int)
  (= GRID_SIZE 16)

  (external (: click Click))
  (external (: keypress KeyPress))
  
  (object Ant (= render (list (ColoredCell (Position 0 0) "gray"))))
  (object Food (= render (list (ColoredCell (Position 0 0) "red"))))

  (: ants (List Ant))
	(= ants (initnext (map Ant (randomPositions GRID_SIZE 6)) 
										(updateObj (prev ants) nextAnt)))

  (: foods (List Food))
	(= foods (initnext (list) 
										 (updateObj (prev foods) (--> obj (if (== (distance obj (closest obj Ant)) 0)
																						 	         then (removeObj obj)
																							         else obj)))))

	(on click (= foods (addObj (prev foods) (map Food (randomPositions GRID_SIZE 4)))))

  (: nextAnt (-> Ant Ant))
  (= nextAnt (fn (ant) (move ant (unitDistance ant (closest ant Food)))))
)