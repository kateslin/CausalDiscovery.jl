int ARR_BND = 100;
int STR_BND = 10;

// abstract type
struct Object {
	// empty struct?	
}

struct Position {
	int x;
	int y;
}

struct Click {
	Position position;
}

struct Cell {
	Position position;
	char[STR_BND] color; 
}

struct Scene {
	Object[] objects;
	char[STR_BND] background;
}

// render functions
Cell[ARR_BND] renderScene(Scene scene) {}

Cell[ARR_BND] renderObj(Object object) {}

// is within bounds
bit isWithinBoundsPosition(int gridSize, Position position) {}

bit isWithinBoundsObject(int gridSize, Object object) {}

// clicked
bit clickedObj(Click click, Object object) {}

bit clickedObjArray(Click click, Object[ARR_BND] objects) {}

bit clickedPosition(Click click, Position position) {}

// intersects
bit intersectsObjObj(Object object1, Object object2) {}

bit intersectsObjObjArray(Object object, Object[] objects)

bit intersectsObjArrays(Object[] objects1, Object[] objects2) {}

bit intersectsScene(Object object) {}

// add/remove/update objects 
Object[ARR_BND] addObj(Object[] objects, Object object) {}

Object[ARR_BND] addObjs(Object[] objects1, Object[] objects2) {}

Object[ARR_BND] removeObjFromArray(Object[] objects1, Object object) {}

Object[ARR_BND] removeObjsFromArray(Object[] objects1, fun mapFn) {}

Object removeObj(Object object) {}

// ??? Object updateObj(Object object, char[STR_BND] field, value) {}

Object[ARR_BND] updateObjArray(Object[ARR_BND] objects, fun map_fn) {}

// adjacent positions

Position[ARR_BND] adjPositions(Position position) {}

// is free functions

bit isFreePosition(Position position) {}

bit isFreeClick(Click click) {}

// unitVector

Position unitVectorPositions(Position position1, Position position2) {}

Position unitVectorObjectPosition(Object object, Position position) {}

Position unitVectorPositionObject(Position position, Object object) {}

Position unitVectorObjects(Object object1, Object object2) {}

// displacement

// adjacent

// rotate

// move

// random
